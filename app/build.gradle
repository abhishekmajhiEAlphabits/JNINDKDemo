plugins {
    id 'com.android.application'
}

android {
    namespace 'com.example.jnindkdemo'
    compileSdk 32

    defaultConfig {
        applicationId "com.example.jnindkdemo"
        minSdk 21
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags ''
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }


    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildFeatures{
        viewBinding true
    }

    sourceSets {
        main {
            //path to folder where placed .so splitted by arch
            jniLibs.srcDirs = ['libs']
        }
    }


    /*
    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
            version '3.18.1'
        }
    }

    use this only when to add c++ code internally from the code

    To use .so external compiled c++ shared library use SourceSets block.

    for using .so file copy the .so files into lib folder from the build/intermediate/cmake/
    after building the apk of app.

    * */
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'com.google.android.material:material:1.7.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.4'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.0'

}